---
- name: create ec2 instance
  amazon.aws.ec2_instance:
    key_name: "{{ instance_key_name }}"
    instance_type: "{{ instance_type }}"
    image: 
      id: "{{ ami_id }}"
    wait: True                                     # default wait_timeout: 600
    network:
      assign_public_ip: "{{ is_public_ip_needed }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"          # aliases: subnet_id
    security_groups: "{{ security_group_ids }}"   # Can be groups under network
    # `Count` has been updated to `filters` - default filters: https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html#parameter-filters 
    tags: "{{ tags }}"
    region: "{{ instance_region }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ root_volume_type }}"
          volume_size: "{{ root_volume_size|int }}"
  register: ec2

# - debug:
#     var: ec2.instances

- name: Attach Volume
  amazon.aws.ec2_vol:
    instance: '{{ attach_new_volumes.instance_id }}'
    volume_size: "{{ additional_volume_size|int }}"
    volume_type: "{{ additional_volume_type }}"
    device_name: "{{ additional_volume_device_name }}"
  loop: "{{ ec2.instances }}"
  loop_control:
    loop_var: attach_new_volumes
  when: additional_volume_needed

- name: Gather information about instance with a tag key Name and value
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ instance_name }}"
      instance-state-name: [ "running"]
  register: ec2_exists
  when: ec2.instances | length == 0

- name: Add new instance to host group
  ansible.builtin.add_host:
    hostname: '{{ new_instances.private_ip_address }}'
    ansible_connection: ssh
    ansible_python_interpreter: /usr/bin/python3.6
    ansible_user: ubuntu
    groups: "{{instance_group_name}}"
  loop: "{{ ec2.instances }}"
  loop_control:
    loop_var: new_instances

- name: Add existing instance to host group
  ansible.builtin.add_host:
    hostname: '{{ existing_instances.private_ip_address }}'
    ansible_connection: ssh
    ansible_user: ubuntu
    ansible_python_interpreter: /usr/bin/python3
    groups: "{{instance_group_name}}"
  loop: "{{ ec2_exists.instances }}"
  loop_control:
    loop_var: existing_instances
  when: 
    - ec2.instances | length == 0 
    - ec2_exists | length > 0
    